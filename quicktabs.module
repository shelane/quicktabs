<?php
// $Id$

/**
 * Implements hook_help().
 */
function quicktabs_help($path, $arg) {
  switch ($path) {
    case 'admin/help#quicktabs':
      $output = '<p>' . t('The Quick Tabs module allows you to create blocks of tabbed content. Clicking on the tabs makes the corresponding content display instantly (it uses jQuery). The content for each tabbed section can be either a node, view, block or another quicktab. It is an ideal way to do something like the Most Popular / Most Emailed stories tabs you see on many news websites. You may create an unlimited number of additional quicktabs, each of which will automatically have an associated block.') . '</p>';
      $output .= '<p>' . t('The <a href="@quicktabs">quicktabs page</a> displays all quicktabs currently available on your site. Create new quicktabs using the <a href="@add-quicktab">add quicktab page</a> (the block containing a new quicktab must also be enabled on the <a href="@blocks">blocks administration page</a>).', array('@quicktabs' => url('admin/structure/quicktabs'), '@add-quicktab' => url('admin/structure/quicktab/add'), '@blocks' => url('admin/structure/block'))) . '</p>';
      return $output;
  }
  if ($path == 'admin/structure/quicktabs' && module_exists('block')) {
    return '<p>' . t('Each quicktab has a corresponding block that is managed on the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function quicktabs_theme() {
  return array(
    'quicktabs_admin_form_tabs' => array(
      'render element' => 'tabs',
      'file' => 'includes/admin.inc',
    ),
    'quicktabs_tabs' => array(
      'variables' => array('quicktabs', 'active_tab' => 'none'),
    ),
    'quicktabs' => array(
      'render element' => 'element',
    ),
    'quicktabs_tab_access_denied' => array(
      'variables' => array('tab'),
    ),
    'quicktabs_style_options' => array(
      'render element' => 'quicktabs_tabstyle',
      'file' => 'includes/admin.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function quicktabs_menu() {
  $items['admin/structure/quicktabs'] = array(
    'title' => 'Quicktabs',
    'description' => 'Create blocks of tabbed content.',
    'page callback' => 'quicktabs_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/list'] = array(
    'title' => 'List quicktabs',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/quicktabs/styles'] = array(
    'title' => 'Styles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_styles'),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/add'] = array(
    'title' => 'Add quicktab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_form', 'add'),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs'] = array(
    'title' => 'Edit quicktab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_form', 'edit', 4),
    'access arguments' => array('administer quicktabs'),
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/edit'] = array(
    'title' => 'Edit quicktab',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/delete'] = array(
    'title' => 'Delete quicktab',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_block_delete', 4),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/clone'] = array(
    'title' => 'Clone quicktab',
    'page callback' => 'quicktabs_clone',
    'page arguments' => array(4),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  $items['admin/build/quicktabs/manage/%quicktabs/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_export_form', 3),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  $items['quicktabs/ajax/node'] = array(
    'page callback' => 'quicktabs_ajax_node',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['quicktabs/ajax/block'] = array(
    'page callback' => 'quicktabs_ajax_block',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['quicktabs/ajax/qtabs'] = array(
    'page callback' => 'quicktabs_ajax_qtabs',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function quicktabs_permission() {
  return array(
    'administer quicktabs' => array(
      'title' => t('Administer Quick Tabs'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function quicktabs_block_info() {
  $blocks = array();
  foreach (quicktabs_get_all_quicktabs() as $qt_name => $quicktab) {
    $blocks[$qt_name]['info'] = $quicktab->title;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function quicktabs_block_view($delta = '') {
  $block = array();
  if ($quicktab = quicktabs_load($delta)) {
    $block['subject'] = $quicktab->title;
    $block['content'] = array(
      '#theme' => 'quicktabs',
      '#quicktabs' => $quicktab,
    );
    if (!empty($block['content'])) {
      $block['content']['#contextual_links']['quicktabs'] = array('admin/structure/quicktabs/manage', array($delta));
    }
  }
  return $block;
}

/**
 * Load all from defaults and database quicktabs.
 */
function quicktabs_get_all_quicktabs() {
  $quicktabs = array();

  // Load quicktabs via ctools if present.
  if (module_exists('ctools')) {
    ctools_include('export');
    $loaded = ctools_export_load_object('quicktabs', 'all');
    foreach ($loaded as $qt_name => $quicktab) {
      $quicktabs[$qt_name] = $quicktab;
    }
    return $quicktabs;
  }

  // Otherwise, load from DB
  $result = db_query('SELECT machine_name, title, tabs, ajax, hide_empty_tabs, default_tab, style FROM {quicktabs} ORDER BY title');
  foreach ($result as $quicktab) {
    $quicktabs[$quicktab->machine_name] = _quicktabs_unpack($quicktab);
  }
  return $quicktabs;
}

/**
 * Unpack a quicktabs row array from the database.
 */
function _quicktabs_unpack($quicktab) {
  $tabs = unserialize($quicktab->tabs);
  $weight = array();
  foreach ($tabs as $key => $tab) {
    $weight[$key] = $tab['weight'];
    if ($tab['type'] == 'qtabs' && $tab['machine_name'] == $quicktab->machine_name) {
      unset($tabs[$key]);
      unset($weight[$key]);
    }
  }
  array_multisort($weight, SORT_ASC, $tabs);

  $quicktab->tabs = $tabs;
  drupal_alter('quicktabs', $quicktabs);
  return $quicktab;
}
/**
 * Load the quicktabs data.
 */
function quicktabs_load($qt_name, $op = 'view') {
  // Load quicktabs via ctools if present.
  if (module_exists('ctools')) {
    ctools_include('export');
    $defaults = ctools_export_load_object('quicktabs', 'names', array($qt_name));
    return isset($defaults[$qt_name]) ? $defaults[$qt_name] : FALSE;
  }

  // Load quicktabs from the database.
  $quicktab = db_query("SELECT machine_name, title, tabs, ajax, hide_empty_tabs, default_tab, style FROM {quicktabs} WHERE machine_name = :machine_name", array(':machine_name' => $qt_name))->fetchObject();
  if ($quicktab) {
    return _quicktabs_unpack($quicktab);
  }
  return FALSE;
}


/**
 * Render quicktabs.
 */
function quicktabs_render($quicktab) {
  // convert views arguments to an array, retrieving %-style args from url
  $quicktab->tabs = _quicktabs_prepare_views_args($quicktab->tabs, $quicktab->ajax);

  if ($quicktab->hide_empty_tabs && !$quicktab->ajax) {
    // Remove empty tabpgages.
    foreach ($quicktab->tabs as $key => $tab) {
      $contents = quicktabs_render_tabpage($tab, TRUE);
      if (empty($contents)) {
        unset($quicktab->tabs[$key]);
      }
      else {
        $quicktab->tabs[$key]['rendered'] = $contents;
      }
    }
    $quicktab->tabs = array_merge($quicktab->tabs);
  }

  $tabs_count = count($quicktab->tabs);
  if ($tabs_count <= 0) {
    return '';
  }

  if ($quicktab->style == 'default') {
    $quicktab->style = variable_get('quicktabs_tabstyle', 'nostyle');
  }
  quicktabs_add_css($quicktab->style);
  drupal_add_js('misc/ajax.js', array('weight' => JS_LIBRARY));
  $javascript = drupal_add_js('misc/progress.js', array('weight' => JS_LIBRARY)) ;
  if (!isset($javascript['setting'][1]['quicktabs']) || !array_key_exists('qt_' . $quicktab->machine_name, $javascript['setting'][1]['quicktabs'])) {
    drupal_add_js(array('quicktabs' => array('qt_' . $quicktab->machine_name => $quicktab)), 'setting');
  }
  drupal_add_js(drupal_get_path('module', 'quicktabs') . '/js/quicktabs.js');

  $attributes = drupal_attributes(array(
    'id' => 'quicktabs-' . $quicktab->machine_name,
    'class' => 'quicktabs_wrapper quicktabs-style-' . drupal_strtolower($quicktab->style),
  ));
  $output = '<div' . $attributes . '>';
  $active_tab = _quicktabs_get_active_tab($quicktab);

  $output .= theme('quicktabs_tabs', array('quicktabs' => $quicktab, 'active_tab' => $active_tab));

  // The main content area, each quicktab container needs a unique id.
  $attributes = drupal_attributes(array(
    'id' => 'quicktabs_container_' . $quicktab->machine_name,
    'class' => 'quicktabs_main quicktabs-style-' . drupal_strtolower($quicktab->style),
  ));
  $output .= '<div' . $attributes . '>';

  if ($quicktab->ajax) {
    // Prepare ajax views.
    //_quicktabs_prepare_views($quicktabs->tabs);
    // Prepare ajax quicktabs.
    //_quicktabs_prepare_qts($quicktabs->tabs);
    // Render only the active tabpage.
    if (isset($active_tab)) {
      $attributes = drupal_attributes(array(
        'id' => 'quicktabs_tabpage_' . $quicktab->machine_name . '_' . $active_tab,
        'class' => 'quicktabs_tabpage',
      ));
      $active_tab_content = isset($quicktab->tabs[$active_tab]['rendered']) ? $quicktab->tabs[$active_tab]['rendered'] : quicktabs_render_tabpage($quicktab->tabs[$active_tab]);
      $output .= '<div' . $attributes . '>' . $active_tab_content . '</div>';
    }
  }
  else {
    // Render all tabpgages.
    foreach ($quicktab->tabs as $key => $tab) {
      $attributes = drupal_attributes(array(
        'id' => 'quicktabs_tabpage_' . $quicktab->machine_name . '_' . $key,
        'class' => 'quicktabs_tabpage' . ($active_tab == $key ? '' : ' quicktabs-hide'),
      ));
      $tab_content = isset($tab['rendered']) ? $tab['rendered'] : quicktabs_render_tabpage($tab);
      $output .= '<div' . $attributes . '>' . $tab_content . '</div>';
    }
  }
  $output .= '</div></div>';
  return $output;
}

/**
 * Ajax callback for node tabpage.
 */
function quicktabs_ajax_node($nid, $teaser, $hide_title) {
  $tabpage = array(
    'type' => 'node',
    'nid' => $nid,
    'teaser' => $teaser,
    'hide_title' => $hide_title,
  );
  $output = quicktabs_render_tabpage($tabpage);
  drupal_json_output(array('status' => TRUE, 'data' => $output));
}

/**
 * Ajax callback for block tabpage.
 */
function quicktabs_ajax_block($bid, $hide_title) {
  $tabpage = array(
    'type' => 'block',
    'bid' => $bid,
    'hide_title' => $hide_title,
  );

  $output = quicktabs_render_tabpage($tabpage);
  drupal_json_output(array('status' => TRUE, 'data' => $output));
}

/**
 * Ajax callback for qtabs tabpage.
 */
function quicktabs_ajax_qtabs($qt_name) {
  $tabpage = array(
    'type' => 'qtabs',
    'machine_name' => $qt_name,
  );

  $output = quicktabs_render_tabpage($tabpage);

  $scripts = drupal_add_js(NULL, NULL);
  $settings = call_user_func_array('array_merge_recursive', $scripts['settings']['data']);
  drupal_json_output(array('status' => TRUE, 'data' => $output, 'settings' => $settings));
}

/**
 * Ajax callback for view tabpage.
 */
function quicktabs_ajax_view($vid, $display) {
  $tabpage = array(
    'type' => 'view',
    'vid' => 'kbview',
    'display' => 'block_1',
  );

  $output = quicktabs_render_tabpage($tabpage);
  return $output; 
}

/**
 * Render quicktabs tabpage.
 */
function quicktabs_render_tabpage($tab, $hide_empty = FALSE) {
  static $cache;

  $cachekey = md5(serialize($tab));
  if (isset($cache[$cachekey])) {
    return $cache[$cachekey];
  }

  $output = '';

  switch ($tab['type']) {
    case 'qtabs':
      if (isset($tab['machine_name'])) {
        if ($quicktabs = quicktabs_load($tab['machine_name'])) {
          $output = quicktabs_render($quicktabs);
        }
      }
      break;

    case 'view':
      if (isset($tab['vid'])) {
        if (module_exists('views')) {

          if ($view = views_get_view($tab['vid'])) {

            if ($view->access($tab['display'])) {
              $view->set_display($tab['display']);
              $view->set_arguments($tab['args']);
              $view_output = $view->preview();
              if (!empty($view->result) || $view->display_handler->get_option('empty') || !empty($view->style_plugin->definition['even empty'])) {
                $output = $view_output;
              }
              else {
                $output = '';
              }
            }
            elseif (!$hide_empty) {
              $output = theme('quicktabs_tab_access_denied', array('tab' => $tab));
            }
            $view->destroy();
          }
        }
        elseif (!$hide_empty) {
          $output = t('Views module is not enabled, cannot display tab content.');
        }
      }
      break;

    case 'block':
      if (isset($tab['bid'])) {
        if (module_exists('block')) {
          $pos = strpos($tab['bid'], '_delta_');
          $blockmodule = drupal_substr($tab['bid'], 0, $pos);
          $blockdelta = drupal_substr($tab['bid'], $pos + 7);
          $block = (object) module_invoke($blockmodule, 'block_view', $blockdelta);

          if (isset($block->content)) {
            $block->module = $blockmodule;
            $block->delta = $blockdelta;
            $block->region = 'quicktabs_tabpage';
            if ($tab['hide_title'] || !isset($block->subject)) {
              $block->subject = FALSE;
            }
            // TODO: this seems clumsy, find out the proper way of rendering a themed block
            $output = theme('block', array('elements' => array('#block' => $block, '#children' => render($block->content), '#markup' => render($block->content))));
          }
        }
        elseif (!$hide_empty) {
          $output = t('Block module is not enabled, cannot display tab content.');
        }
      }
      break;

    case 'node':
      if (isset($tab['nid'])) {
        $node = node_load($tab['nid']);
        if (!empty($node)) {
          if (node_access('view', $node)) {
            $buildmode = $tab['teaser'] ? 'teaser' : 'full';
            $nstruct = node_view($node, $buildmode);
            if ($tab['hide_title']) {
              unset($nstruct['#node']->title);
            }
            $output = drupal_render($nstruct);
          }
          elseif (!$hide_empty) {
            $output = theme('quicktabs_tab_access_denied', array($tab));
          }
        }
      }
      break;

    case 'freetext':
      $output = $tab['text'];
      break;
  }

  $cache[$cachekey] = $output;
  return $output;
}

/**
 * Fetch the necessary CSS files for the tab styles.
 */
function quicktabs_add_css($style) {
  // Add quicktabs CSS.
  drupal_add_css(drupal_get_path('module', 'quicktabs') . '/css/quicktabs.css');

  if ($style == 'default') {
    // Get the default style.
    $style = variable_get('quicktabs_tabstyle', 'nostyle');
  }

  $style_css = _quicktabs_get_style_css($style);
  if ($style_css != 'nostyle') {
    drupal_add_css($style_css, 'module');
  }
}

/**
 * Theme function to display the access denied tab.
 *
 * @ingroup themeable
 */
function theme_quicktabs_tab_access_denied($variables) {
  $tab = $variables['tab'];

  return t('You are not authorized to access this content.');
}

/**
 * Theme function to output quicktabs.
 *
 * @ingroup themeable
 */
function theme_quicktabs($variables) {
  $element = $variables['element'];
  return quicktabs_render($element['#quicktabs']);
}

/**
 * Theme function for output of the tabs. Use this to ADD extra classes.
 * The general structure 'ul.quicktabs_tabs li a' needs to be maintained
 * for the jQuery to work.
 *
 * @ingroup themeable
 */
function theme_quicktabs_tabs($variables) {
  $quicktabs = $variables['quicktabs'];
  $active_tab = $variables['active_tab'];

  $output = '';
  $tabs_count = count($quicktabs->tabs);
  if ($tabs_count <= 0) {
    return $output;
  }

  $index = 1;

  $output .= '<ul class="quicktabs_tabs quicktabs-style-' . drupal_strtolower($quicktabs->style) . '">';
  foreach ($quicktabs->tabs as $i => $tab) {
    $class = array();
    $class[] = 'qtab-' . $i;
    // Add first, last and active classes to the list of tabs to help out themers.
    if ($i == $active_tab) {
      $class[] = 'active';
    }
    if ($index == 1) {
      $class[] = 'first';
    }
    if ($index == $tabs_count) {
      $class[] = 'last';
    }
    $attributes_li = drupal_attributes(array('class' => $class));

    $options = _quicktabs_construct_link_options($quicktabs, $i);
    $output .= '<li' . $attributes_li . '>' . l($tab['title'], $_GET['q'], $options) . '</li>';

    $index++;
  }
  $output .= '</ul>';

  return $output;
}

/**
 * Implements hook_quicktabs_tabstyles().
 *
 * This hook allows other modules to create additional tab styles for
 * the quicktabs module.
 *
 * @return array
 *   An array of key => value pairs suitable for inclusion as the #options in a
 *   select or radios form element. Each key must be the location of a css
 *   file for a quick tabs style. Each value should be the name of the style.
 */
function quicktabs_quicktabs_tabstyles() {
  $tabstyles_directory = drupal_get_path('module', 'quicktabs') . '/tabstyles';
  $files = file_scan_directory($tabstyles_directory, '/\.css$/');
  $tabstyles = array();
  foreach ($files as $file) {
    // Skip RTL files.
    if (!strpos($file->name, '-rtl')) {
      $tabstyles[$file->uri] = drupal_ucfirst($file->name);
    }
  }
  return $tabstyles;
}

/**
 * Helper function to construct link options for tab links.
 */
function _quicktabs_construct_link_options($quicktab, $tabkey) {
  $qt_name = $quicktab->machine_name;
  $ajax = $quicktab->ajax;
  $tab = $quicktab->tabs[$tabkey];
  $id = 'quicktabs-tab-' . implode('-', array($qt_name, $tabkey));

  // Need to construct the correct querystring for the tab links.
  $query = drupal_get_query_parameters(NULL, array("quicktabs_$qt_name", 'q', 'page'));
  $query["quicktabs_{$qt_name}"] = $tabkey;

  $class = array();
  if ($ajax) {
    $class[] = 'qt_ajax_tab';
  }
  else {
    $class[] = 'qt_tab';
  }

  $link_options = array(
    'attributes' => array(
      'id' => $id,
      'class' => $class,
    ),
    'query' => $query,
    'fragment' => 'quicktabs-' . $qt_name,
  );
  return $link_options;
}


/**
 * Helper function to get the css file for given style.
 */
function _quicktabs_get_style_css($style = 'nostyle') {
  static $tabstyles;

  if ($style != 'nostyle') {
    if (!isset($tabstyles)) {
      $tabstyles = module_invoke_all('quicktabs_tabstyles');
    }
    foreach ($tabstyles as $css_file => $tabstyle) {
      if ($style == $tabstyle) {
        return $css_file;
      }
    }
  }

  return 'nostyle';
}

/**
 * Helper function to determine active tab from the url.
 */
function _quicktabs_get_active_tab($quicktab) {
  $active_tab = isset($quicktab->default_tab) ? $quicktab->default_tab : key($quicktab->tabs);
  $active_tab = isset($_GET['quicktabs_' . $quicktab->machine_name]) ? $_GET['quicktabs_' . $quicktab->machine_name] : $active_tab;

  if (isset($active_tab) && isset($quicktab->tabs[$active_tab])) {
    return $active_tab;
  }
  return NULL;
}

/**
 * Helper function to add views settings to ajax tabs.
 */
function _quicktabs_prepare_views($tabs) {
  if (module_exists('views')) {
    views_add_js('ajax_view');
    views_add_css('views');
    foreach ($tabs as $key => $tab) {
      if ($tab['type'] == 'view') {
        // We need to pass view details to js in case there is ajax paging.
        $settings = array(
          'views' => array(
            'ajax_path' => url('views/ajax'),
            'ajaxViews' => array(
              array(
                'view_name' => $tab['vid'],
                'view_display_id' => $tab['display'],
                'view_args' => implode('/', $tab['args']),
                'view_path' => $_GET['q'],
              ),
            ),
          ),
        );
        drupal_add_js($settings, 'setting');
      }
    }
  }
}


/**
 * Helper function to use view arguments from the URL.
 */
function _quicktabs_prepare_views_args($tabs, $ajax = 0) {
  foreach ($tabs as $key => $tab) {
    if ($tab['type'] == 'view') {
      if ($ajax) views_add_js('ajax_view');
      
      $url_args = arg();
      $args = $tab['args'];

      foreach ($url_args as $id => $arg) {
        $args = str_replace("%$id", $arg, $args);
      }
      $args = preg_replace(',/?(%\d),', '', $args);
      $args = $args ? explode('/', $args) : array();

      $tab['args'] = $args;
      $tabs[$key] = $tab;
    }
  }
  return $tabs;
}