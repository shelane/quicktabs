<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function quicktabs_help($path, $arg) {
  switch ($path) {
    case 'admin/build/quicktabs':
      return t('<p>The Quick Tabs module allows you to create blocks of tabbed content. You can create a block on your site containing up to six tabs with corresponding content. Clicking on the tabs makes the corresponding content display instantly (it uses jQuery). The content for each tabbed section can be either a view or an existing block. It is an ideal way to do something like the Most Popular / Most Emailed stories tabs you see on many news websites.</p>
<p>Once created, the Quick Tabs blocks show up in your block listing, ready to be configured and enabled like other blocks.</p>
<p>Multiple Quick Tabs blocks can be placed on a single page.</p>
<p>Visit the <a href="@configuration">Quick Tabs configuration page</a> to choose a style for your Quick Tabs blocks.</p>
<p>Click on the "New QT block" tab to get started.</p>', array('@configuration' => url('admin/settings/quicktabs')));
    case 'admin/build/quicktabs/add':
      return '<p>'. t('Here you can create a new Quick Tabs block. Once you have created this block you will be taken to the <a href="@overview">blocks</a> page to configure and enable it.', array('@overview' => url('admin/build/block'))) .'</p>';
  }
}

/**
 * Implementation of hook_theme().
 */
function quicktabs_theme() {
  return array(
    'quicktabs_settings' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/admin.inc',
    ),
    'quicktabs_preview_page' => array(
      'arguments' => array(),
      'file' => 'includes/admin.inc',
    ),
    'qt_tabs' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/admin.inc',
    ),
    'quicktabs_block' => array(
      'arguments' => array('block', 'title' => TRUE),
    ),
    'quicktabs_tabs' => array(
      'arguments' => array('tabs'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function quicktabs_menu() {
  $items['admin/build/quicktabs'] = array(
    'title' => 'Quick Tabs',
    'file' => 'includes/admin.inc',
    'description' => 'Create blocks of tabbed content - content for each tab can be a view or a block.',
    'page callback' => 'quicktabs_list',
    'access arguments' => array('administer quicktabs blocks'),
  );
  $items['admin/build/quicktabs/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/build/quicktabs/add'] = array(
    'title' => 'New QT block',
    'file' => 'includes/admin.inc',
    'access arguments' => array('create quicktabs block'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_form', 'add'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/quicktabs/%quicktabs/delete'] = array(
    'title' => 'Delete QT block',
    'file' => 'includes/admin.inc',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_block_delete', 3),
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/quicktabs/%quicktabs/edit'] = array(
    'title' => 'Edit QT block',
    'file' => 'includes/admin.inc',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_form', 'edit', 3),
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/quicktabs/%quicktabs/clone'] = array(
    'title' => 'Clone QT block',
    'file' => 'includes/admin.inc',
    'access arguments' => array('administer blocks'),
    'page callback' => 'quicktabs_clone',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/quicktabs'] = array(
    'title' => 'Quick Tabs',
    'file' => 'includes/admin.inc',
    'description' => 'Select a style for your Quick Tabs blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quicktabs_settings'),
    'type'     => MENU_NORMAL_ITEM,
    'access arguments'   => array('administer site configuration'),
  );
  $items['quicktabs/preview'] = array(
    'file' => 'includes/admin.inc',
    'page callback' => 'quicktabs_preview_page',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  $items['quicktabs/ahah'] = array(
    'page callback' => 'quicktabs_ahah',
    'file' => 'includes/admin.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  $items['quicktabs/ajax/node'] = array(
    'page callback' => 'quicktabs_ajax_node',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['quicktabs/ajax/block'] = array(
    'page callback' => 'quicktabs_ajax_block',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
   );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function quicktabs_perm() {
  return array('create quicktabs block', 'administer quicktabs blocks');
}

/**
 * Implementation of hook_block().
 */
function quicktabs_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {
    case 'list':
      $blocks = array();
      $jqueryblocks = array();
      $result = db_query('SELECT * FROM {quicktabs}');
      while ($row = db_fetch_object($result)) {
        $jqueryblocks[$row->qtid] = $row->title;
      }
      foreach ($jqueryblocks as $key => $val) {
        $blocks[$key]['info'] = t($val);
      }
      return $blocks;
      break;

    case 'view':
      $mainblock = array();
      if ($qtblock = quicktabs_load($delta)) {
        $mainblock['subject'] = $qtblock['title'];
        if (!$qtblock['ajax']) {
          $mainblock['content'] = quicktabs_render($qtblock['tabs']);
        }
        else {
          $mainblock['content'] = quicktabs_ajax_render($qtblock['tabs'], $qtblock['qtid']);
        }
      }
      return $mainblock;
      break;
  }
}

/**
 * Render quicktabs.
 */
function quicktabs_render($tabs) {
  quicktabs_add_css();
  drupal_add_js(drupal_get_path('module', 'quicktabs') .'/js/quicktabs.js');

  $tabtitles = array();
  foreach ($tabs as $tab) {
    $tabtitles[] = $tab['title'];
  }
  $output = '<div class="quicktabs_wrapper">';
  $output .= theme('quicktabs_tabs', $tabtitles);
  $output .= '<div class="quicktabs_main">';
  foreach ($tabs as $tab) {
    $output .= '<div class="quicktabs">';
    $output .= quicktabs_render_tabpage($tab);
    $output .= '</div>';
  }
  $output .= '</div></div>';

  return $output;
}

/**
 * Render ajax quicktabs.
 */
function quicktabs_ajax_render($tabs, $delta) {
  quicktabs_add_css();
  drupal_add_js(drupal_get_path('module', 'quicktabs') .'/js/quicktabs.js');

  if (module_exists('views')) {
    views_add_js('ajax_view');
    foreach ($tabs as $key => $tab) {
      if ($tab['type'] == 'view') {
       $args_array = explode(',', $tab['args']);
        foreach($args_array as $arg) {
          $args[] = trim($arg);
        }
        // we need to pass view details to js in case there is ajax paging
        $settings = array(
          'views' => array(
            'ajax_path' => url('views/ajax'),
            'ajaxViews' => array(
              array(
                'view_name' => $tab['vid'],
                'view_display_id' => $tab['display'],
                'view_args' => implode('/', $args),
                'view_path' => $_GET['q'],
              ),
            ),
          ),
        );
        drupal_add_js($settings, 'setting');
      }
    }
  }

  // Need to construct a path for the tab links for when js is disabled.
  $fullpath = explode('?', request_uri());
  $queries = $_GET;
  unset($queries['quicktabs_'. $delta]);
  unset($queries['q']);
  unset($queries['page']);
  $querystring = '';
  if (!empty($queries)) {
    $i = 0;
    foreach ($queries as $key => $value) {
      $querystring .= $i > 0 ? '&'. $key .'='. $value : $key .'='. $value;
      $i++;
    }
    $querystring .= '&';
  }
  $path = $fullpath[0];
  $path .= '?'. $querystring;
  // find out which tab is active
  $active_tab = isset($_GET['quicktabs_'. $delta]) ? $_GET['quicktabs_'. $delta] : 0;

  // begin output of Quick Tabs mark-up
  $output = '<div class="quicktabs_wrapper">';
  // theme the tabs
  $output .= theme('quicktabs_tabs', $tabs, TRUE, $path, $delta, $active_tab);
  // the main content area begins
  $output .= '<div class="quicktabs_main">';
  // each quick tabs container needs a unique id so that multiple instances work with ajax
  $output .= '<div id="quicktabs_ajax_container_'. $delta .'">';
  // Render the active tabpgage.
  $output .= quicktabs_render_tabpage($tabs[$active_tab]);
  $output .= '</div>';
  $output .= '</div></div>';

  return $output;
}

/**
 * Ajax callback for node tabpage.
 */
function quicktabs_ajax_node($nid, $teaser, $hide_title) {
  $tabpage = array(
    'type' => 'node',
    'nid' => $nid,
    'teaser' => $teaser,
    'hide_title' => $hide_title,
  );
  $output = quicktabs_render_tabpage($tabpage);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
}

/**
 * Ajax callback for block tabpage.
 */
function quicktabs_ajax_block($bid, $hide_title) {
  $tabpage = array(
    'type' => 'block',
    'bid' => $bid,
    'hide_title' => $hide_title,
  );

  $output = quicktabs_render_tabpage($tabpage);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
}

/**
 * Theme function for output of the tabs. Use this to ADD extra classes.
 * The general structure 'ul.quicktabs_tabs li a' needs to be maintained
 * for the jQuery to work.
 *
 * @ingroup themeable
 */
function theme_quicktabs_tabs($tabs, $ajax = FALSE, $path = NULL, $delta = 0, $active_tab = 0) {
  $output = '';
  $tabs_count = count($tabs);
  if ($tabs_count <= 0) {
    return $output;
  }

  $index = 1;
  $output .= '<ul class="quicktabs_tabs">';
  foreach ($tabs as $i => $tab) {
    $class = 'qtab-'. $i;
    // Add first, last and active classes to the list of tabs to help out themers.
    $class .= ($i == $active_tab ? ' active' : '');
    $class .= ($index == 1 ? ' first' : '');
    $class .= ($index == $tabs_count ? ' last': '');

    if ($ajax) {
      $qtpath = 'quicktabs_'. $delta . '='. $i;
      switch ($tab['type']) {
      case 'view':
        if (module_exists('views')) {
          if ($tab['args'] != '') {
            $argstring = '--'. str_replace(',', '|', $tab['args']);
          }
          else {
            $argstring = '';
          }
          $id = 'view--'. $delta .'--'. $i .'--'. $tab['vid'] .'--'. $tab['display'] . $argstring;
        }
        break;
      case 'node':
        $id = 'node--'. $delta .'--'. $i .'--'. $tab['nid'] .'--'. $tab['teaser'] .'--'. $tab['hide_title'];
        break;
      case 'block':
        $id = 'block--'. $delta .'--'. $i .'--'. $tab['bid'] .'--'. $tab['hide_title'];
        break;
      }
      $output .= '<li'. drupal_attributes(array('class' => $class)) .'><a href="'. $path . $qtpath .'" class="qt_ajax_tabs" id="'. $id .'">'. $tab['title'] .'</a></li>';
    } else {
      $output .= '<li'. drupal_attributes(array('class' => $class)) .'><a href="#">'. $tab .'</a></li>';
    }
    $index++;
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Theme function for the overall final quicktabs block.
 *
 * @ingroup themeable
 */
function theme_quicktabs_block($block, $title = TRUE) {
  $output = "<div class=\"block block-$block->module\" id=\"block-$block->module-$block->delta\">\n";
  if ($title and isset($block->subject)) {
    $output .= " <h2 class=\"title\">$block->subject</h2>\n";
  }
  $output .= " <div class=\"content\">$block->content</div>\n";
  $output .= "</div>\n";
  return $output;
}


/**
 * Fetch the necessary CSS files for the tab styles.
 */
function quicktabs_add_css($tabstyle_css = NULL) {
  // Add quicktabs CSS.
  drupal_add_css(drupal_get_path('module', 'quicktabs') .'/quicktabs.css');

  // Add specific CSS.
  if (!isset($tabstyle_css)) {
    $tabstyle_css = variable_get('quicktabs_tabstyle', 'default');
  }

  if ($tabstyle_css != 'default') {
    drupal_add_css($tabstyle_css, 'module');
  }
}

/**
 * Implementation of hook_quicktabs_tabstyles().
 *
 * This hook allows other modules to create additional tab styles for
 * the quicktabs module.
 *
 * @return array
 *   An array of key => value pairs suitable for inclusion as the #options in a
 *   select or radios form element. Each key must be the location of a css
 *   file for a quick tabs style. Each value should be the name of the style.
 */
function quicktabs_quicktabs_tabstyles() {
  $tabstyles_directory = drupal_get_path('module', 'quicktabs') .'/tabstyles';
  $files = file_scan_directory($tabstyles_directory, '\.css$');

  $tabstyles = array();
  foreach ($files as $file) {
    $tabstyles[$file->filename] = drupal_ucfirst($file->name);
  }
  return $tabstyles;
}

/**
 * Load the quicktabs data.
 */
function quicktabs_load($qtid) {
  $qtblock = db_fetch_object(db_query('SELECT title, tabs, ajax FROM {quicktabs} WHERE qtid = %d', $qtid));
  if (!$qtblock) {
    return FALSE;
  }

  $tabs = unserialize($qtblock->tabs);
  foreach ($tabs as $key => $tab) {
    $weight[$key] = $tab['weight'];
  }
  array_multisort($weight, SORT_ASC, $tabs);

  $quicktabs = array(
    'qtid' => $qtid,
    'title' => $qtblock->title,
    'tabs' => $tabs,
    'ajax' => $qtblock->ajax,
  );

  return $quicktabs;
}

/**
 * Render quicktabs tabpage.
 */
function quicktabs_render_tabpage($tab) {
  $output = '';
  switch ($tab['type']) {
    case 'view':
      if (isset($tab['vid'])) {
        if (module_exists('views')) {
          $args = array();
          if ($tab['args'] != '') {
            $args_array = explode(',', $tab['args']);
            foreach($args_array as $arg) {
              $args[] = trim($arg);
            }
          }
          $func_args = array_merge(array($tab['vid'], $tab['display']), $args);
          $output = call_user_func_array('views_embed_view', $func_args);
        }
        else {
          $output = t('Views module not enabled, cannot display tab content.');
        }
      }
      break;

    case 'block':
      if (isset($tab['bid'])) {
        $pos = strpos($tab['bid'], '_delta_');
        $blockmodule = substr($tab['bid'], 0, $pos);
        $blockdelta = substr($tab['bid'], $pos + 7);
        $block = (object) module_invoke($blockmodule, 'block', 'view', $blockdelta);
        if (isset($block->content)) {
          $block->module = $blockmodule;
          $block->delta = $blockdelta;
          $output = theme('quicktabs_block', $block, !$tab['hide_title']);
        }
      }
      break;

    case 'node':
      if (isset($tab['nid'])) {
        $node = node_load($tab['nid']);
        if (!empty($node)) {
          if ($tab['hide_title']) {
            $node->title = NULL;
          }
          $output = theme('node', $node, $tab['teaser']);
        }
      }
      break;

    case 'freetext':
      $output = $tab['text'];
      break;
  }

  return $output;
}
